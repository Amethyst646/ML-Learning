# -*- coding: utf-8 -*-
"""dementia_prediction_deploy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QXAEL6CcWQS3HSB_S7IqtW_w51AYpmOw
"""

# Import libraries
import streamlit as st
import pandas as pd
import pickle
from time import sleep
from datetime import date
from xgboost import XGBClassifier

# Load the best model
with open('dementia_model.pkl', 'rb') as file:
    model = pickle.load(file)

def run():
  # Initialize stored data
  if "first_visit_dates" not in st.session_state:
    st.session_state.first_visit_dates = {}

  # Add title
  st.title('Predict Dementia Status')

  # Create form
  with st.form('Dementia Prediction System'):
    with st.expander("Personal Information"):
      # Input Patient ID
      id = st.text_input("Patient ID", help="Enter your patient ID (i.e. OAS_12345)")

      # Initialize input for Age and Gender
      input1, input2 = st.columns(2)

      with input1:
        age  = st.text_input("Age", help="Enter your age (between 1 and 120) (i.e. 78)", value='0')

      with input2:
        gender = st.selectbox("Gender", ['Select your gender', 'Male', 'Female'], help="Select your gender")

      # Initialize input for Visit and MR Delay
      input3, input4 = st.columns(2)

      with input3:
        visit = st.number_input("Visit", help="Enter your current visitation number. (i.e. 1 (if this is your first visit))", min_value=0, step=1)

      with input4:
        visit_date = st.date_input("Visit Date", min_value=date(2000, 1, 1), value=None)

      # Initialize input for EDUC and SES
      input5, input6 = st.columns(2)

      with input5:
        educ = st.text_input("Years of Education (EDUC)", help='Enter your years of education (including post doc, if applicable) (i.e., 20)', value='0')

      with input6:
        ses = st.number_input("Socioeconomic (SES)", help='Enter your socioeconomic status of Hollingshead Index from 1 (highest status) to 5 (lowest status)', min_value=1, max_value=5)

    with st.expander("Health Information"):
      # Initialize input for MMSE and CDR
      input7, input8 = st.columns(2)

      with input7:
        mmse = st.text_input("Mini-Mental State Examination (MMSE)", help='Enter your Mini-Mental State Examination (must be between 1 and 30, i.e., 14)', value='0')

      with input8:
        cdr = st.number_input("Clinical Dementia Rating (CDR)", help='Enter your Clinical Dementia Rating (0-2) (i.e. 0.5)', min_value=0.0, step=0.5, max_value=2.0)

      # Initialize input for eTIV, nWBV and ASF
      input9, input10, input11 = st.columns(3)

      with input9:
        etiv = st.text_input("Estimated Intracranial Volume (eTIV)", help='Enter your estimated total iIntracranial Volume (cm^3) (must be between 1000 and 2500, i.e., 1106)', value='0')

      with input10:
        nwbv = st.text_input("Normalized Brain Volume (nWBV)", help='Enter your Normalized whole brain volume (must be between 0 and 2, i.e., 0.643)', value='0')

      with input11:
        asf = st.text_input("Atlas Scaling Factor (ASF)", help='Enter your Atlas scaling factor (i.e. the determinant of the transform matrix) (must be between 0 and 2, i.e., 0.88)', value='0')

    submit = st.form_submit_button("Submit Data")

  if submit:
    error = False

    # Validation for MMSE, CDR, etc.
    try:
      if not (isinstance(visit, int) and visit >= 1):
        st.error("Visit number should be a positive integer.")
        error = True
    except ValueError as e:
      st.error(f"Error in Visit: {str(e)}")
      error = True

    try:
      if not visit_date:
        raise ValueError("Visit date cannot be empty.")
        error = True
    except ValueError as e:
      st.error(f"Error in Visit Date: {str(e)}")
      error = True

    try:
      if gender == "Select Gender":
        raise ValueError("Please select a valid gender.")
        error = True
    except ValueError as e:
      st.error(f"Error in Gender: {str(e)}")
      error = True

    try:
      educ = int(educ)
      if not (1 <= educ):
        raise ValueError("Years of Education should be a positive number.")
        error = True
    except ValueError as e:
      st.error(f"Error in Years of Education: {str(e)}")
      error = True

    try:
      age = int(age)
      if not (1 <= age):
        raise ValueError("Age should be a positive number.")
        error = True
    except ValueError as e:
      st.error(f"Error in Age: {str(e)}")
      error = True

    try:
      etiv = int(etiv)
      if not (1000 < etiv < 2250):
        raise ValueError("eTIV should be between 1000 and 2250.")
        error = True
    except ValueError as e:
      st.error(f"Error in eTIV: {str(e)}")
      error = True

    try:
      asf = float(asf)
      if not (0 < asf < 2.0):
        raise ValueError("ASF should be between 0.1 and 2.0.")
        error = True
    except ValueError as e:
      st.error(f"Error in eTIV: {str(e)}")
      error = True

    try:
      mmse = int(mmse)
      if not (1 <= mmse <= 30):
        raise ValueError("MMSE should be between 1 and 30.")
        error = True
    except ValueError as e:
      st.error(f"Error in MMSE: {str(e)}")
      error = True

    try:
      cdr = float(cdr)
      if not (0 <= cdr <= 2.0):
        raise ValueError("CDR should be between 0 and 2.0.")
        error = True
    except ValueError as e:
      st.error(f"Error in CDR: {str(e)}")
      error = True

    try:
      nwbv = float(nwbv)
      if not (0 < nwbv <= 2.0):
        raise ValueError("nWBV should be between 0.1 and 2.0.")
        error = True
    except ValueError as e:
      st.error(f"Error in nWBV: {str(e)}")
      error = True

    if not error:
      # Calculate MR Delay
      mr_delay = 0

      if visit == 1:
        # Store first visit date
        st.session_state.first_visit_dates[id] = visit_date
      else:
        # Retrieve first visit date
        first_visit_date = st.session_state.first_visit_dates.get(id)
        if first_visit_date:
          mr_delay = (visit_date - first_visit_date).days
        else:
          st.warning(f"No first visit record found for {id}. Please input the first visit.")

      with input4:
        st.metric("MR Delay (days)", mr_delay)

      gender_type = {'Male': 'M', 'Female': 'F'}
      gender = gender_type[gender]

      # Initialize the inputted data into Pandas DataFrame
      data_input = pd.DataFrame([{
          'Subject ID': id,
          'Age': age,
          'Visit': visit,
          'M/F': gender,
          'MR Delay': mr_delay,
          'EDUC': educ,
          'SES': ses,
          'MMSE': mmse,
          'CDR': cdr,
          'eTIV': etiv,
          'nWBV': nwbv,
          'ASF': asf}])

      # Add progression
      bar = st.progress(0)
      for percent_complete in range(101):
        sleep(0.005)
        bar.progress(percent_complete)

      # Predict the data
      prediction = model.predict(data_input)

      # Get the probability
      predict_proba = model.predict_proba(data_input)
      proba_percent = predict_proba*100

      # Finish bar progression
      bar.progress(100)
      st.success('Prediction complete.')

      # Show prediction result
      if prediction == 0:
        st.write(f"You are approximately around {proba_percent[0][0]:.2f}% diagnosed as Demented")
      elif prediction == 1:
        st.write(f"You are about {proba_percent[0][1]:.2f}% diagnosed as Non-Demented")


if __name__ == '__main__':
  run()
